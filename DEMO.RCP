/* Файл:   demo.rcp
 * Проект: 2KLIB. Версия 2.04.
 *         Библиотека классов параллельного программирования для C++.
 * Демо-пример использования библиотеки классов 2KLIB
 * Большое количество статических и динамических параллельных процессов
 * Гурин С.В. Томский политехнический университет, каф. электрических станций
 * Borland C++ 3.1, Rcc 3.3, Multi-Edit 7.0
 *
 * Для компиляции демо - программы введите командную строку:
 *     rcc @demo
 *
 * Замечание!!!. Данная версия библиотеки спроектирована только для
 *               компилятора Borland C++ версии 3.1.. Работа с другими
 *               компиляторами не гарантируется.
 */

# include <conio.h>
# include "2kkey.h"
# include "note.h"

простой_процесс(ТЧасы)
{ for (;;)
  { ТВремя* время = текущее_время();
    textattr(LIGHTGREEN);
    gotoxy(70, 1);
    cprintf("%02d:%02d:%02d", время->час, время->минута, время->секунда);
    пауза(1000);
  }
}

static ТЧасы часы;

простой_процесс(ТЗвезда)
{ int х = 1;
  int у = 2;
  for (;;)
  { пауза(случайное_число(500, 2000));
    textattr(случайное_число(1, 15));
    gotoxy(х, у);
    putch(' ');
    х = случайное_число(1, 80);
    у = случайное_число(2, 24);
    gotoxy(х, у);
    putch('.');
  }
}

static ТЗвезда звезда[200];

простой_процесс(ТКомета)
{ int dx, dy, х, у, цвет, скорость;
  for (;;)
  { dx = случайное_число(-1, 1);
    dy = случайное_число(-1, 1);
    if (!dx) dx = 1;
    if (!dy) dy = 1;
    х  = случайное_число(5, 75);
    у  = случайное_число(3, 21);
    скорость = случайное_число(20, 100);
    цвет     = случайное_число(10, 15);
    пауза(случайное_число(2000, 5000));
    for (;;)
    { textattr(цвет);
      gotoxy(х, у);
      putch(' ');
      х += dx;
      if (х == 1 || х == 80) break;
      у += dy;
      if (у == 2 || у == 24) break;
      gotoxy(х, у);
      putch('\x4');
      пауза(скорость);
    }
  }
}

static ТКомета комета[10];

простой_процесс(ТМелодия)
{ static int нота[] =
  { РЕ, МИ, ФА, МИ,
    ФА, РЕ, ДО_ДИЕЗ, РЕ,
    МИ, ФА, СОЛЬ, МИ,
    ФА, МИ, МИ, РЕ,
    ДО_ДИЕЗ, ЛЯ / 2, ДО_ДИЕЗ, МИ,
    ЛЯ, СОЛЬ, ФА, МИ,
    0
  };
  for (int i = 0, делитель = 8; ; ++i)
  { if (нота[i] == 0)
    { i = 0;
      делитель = 1 << случайное_число(0, 3);
    }
    звук(нота[i] * 4 / делитель, 400);
  }
}

static ТМелодия мелодия;

static volatile int число_демо = 0;

простой_процесс(ТДемо)
{ int цвет = случайное_число(10, 15);
  int у = случайное_число(2, 24);
  число_демо++;
  for (int х = 1; х < 75; ++х)
  { textattr(цвет);
    gotoxy(х, у);
    cputs(" демо");
    пауза(100);
  }
  gotoxy(х, у);
  cputs("     ");
  число_демо--;
}

void ТСценарий::тело_процесса(void)
{ ТКанал<ТСобытие> канал;
  ТСобытие клавиша;
  канал.таймаут(10000);
  клавиатура.соединить(канал);

  clrscr();
  _setcursortype(_NOCURSOR);
  textattr(7);
  cputs("Демо - пример. Для завершения нажмите Esc...");
  for (;;)
  { канал >> клавиша;
    if (клавиша == ESC) break;
    new ТДемо;
  }
  if (число_демо)
  { textattr(15);
    gotoxy(1, 1);
    cputs("Подождите завершения динамических процессов... ");
    while (число_демо) пауза(100);
  }
  textattr(7);
  clrscr();
  звук(0);
}
